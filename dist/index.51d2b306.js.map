{"mappings":"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","sources":["src/assets/scripts/RGraph.svg.bar.js"],"sourcesContent":["'version:2022-09-11 (6.09)';\n//\n    // o--------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:               |\n    // |                                                                                |\n    // |                         https://www.rgraph.net                                 |\n    // |                                                                                |\n    // | RGraph is licensed under the Open Source MIT license. That means that it's     |\n    // | totally free to use and there are no restrictions on what you can do with it!  |\n    // o--------------------------------------------------------------------------------o\n\n    RGraph = window.RGraph || {isrgraph:true,isRGraph:true,rgraph:true};\n    RGraph.SVG = RGraph.SVG || {};\n\n// Module pattern\n(function (win, doc, undefined)\n{\n    RGraph.SVG.Bar = function (conf)\n    {\n        //\n        // A setter that the constructor uses (at the end)\n        // to set all of the properties\n        //\n        // @param string name  The name of the property to set\n        // @param string value The value to set the property to\n        //\n        this.set = function (name, value)\n        {\n            if (arguments.length === 1 && typeof name === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        \n                        name  = ret.name;\n                        value = ret.value;\n\n                        this.set(name, value);\n                    }\n                }\n            } else {\n\n                var ret = RGraph.SVG.commonSetter({\n                    object: this,\n                    name:   name,\n                    value:  value\n                });\n                \n                name  = ret.name;\n                value = ret.value;\n\n                this.properties[name] = value;\n\n                // If setting the colors, update the originalColors\n                // property too\n                if (name === 'colors') {\n                    this.originalColors = RGraph.SVG.arrayClone(value);\n                    this.colorsParsed = false;\n                }\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter.\n        // \n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            return this.properties[name];\n        };\n\n\n\n\n\n\n\n\n        this.id               = conf.id;\n        this.uid              = RGraph.SVG.createUID();\n        this.container        = document.getElementById(this.id);\n        this.layers           = {}; // MUST be before the SVG tag is created!\n        this.svg              = RGraph.SVG.createSVG({object: this,container: this.container});\n        this.isRGraph         = true;\n        this.isrgraph         = true;\n        this.rgraph           = true;\n        this.data             = conf.data;\n        this.type             = 'bar';\n        this.coords           = [];\n        this.coords2          = [];\n        this.stackedBackfaces = [];\n        this.originalColors   = {};\n        this.gradientCounter  = 1;\n        this.firstDraw        = true; // After the first draw this will be false\n\n\n\n        // Convert strings to numbers\n        this.data = RGraph.SVG.stringsToNumbers(this.data);\n\n\n\n\n        // Add this object to the ObjectRegistry\n        RGraph.SVG.OR.add(this);\n        \n        this.container.style.display = 'inline-block';\n\n        this.properties =\n        {\n            marginLeft:   35,\n            marginRight:  35,\n            marginTop:    35,\n            marginBottom: 35,\n            \n            variant:          null,\n            variant3dOffsetx: 10,\n            variant3dOffsety: 5,\n\n            backgroundColor:            null,\n            backgroundImage:            null,\n            backgroundImageAspect:      'none',\n            backgroundImageStretch:     true,\n            backgroundImageOpacity:     null,\n            backgroundImageX:           null,\n            backgroundImageY:           null,\n            backgroundImageW:           null,\n            backgroundImageH:           null,\n            backgroundGrid:             true,\n            backgroundGridColor:        '#ddd',\n            backgroundGridLinewidth:    1,\n            backgroundGridHlines:       true,\n            backgroundGridHlinesCount:  null,\n            backgroundGridVlines:       true,\n            backgroundGridVlinesCount:  null,\n            backgroundGridBorder:       true,\n            backgroundGridDashed:       false,\n            backgroundGridDotted:       false,\n            backgroundGridDashArray:    null,\n            \n            // 20 colors. If you need more you need to set the colors property\n            colors: [\n                'red', '#0f0', '#00f', '#ff0', '#0ff', '#0f0','pink','orange','gray','black',\n                'red', '#0f0', '#00f', '#ff0', '#0ff', '#0f0','pink','orange','gray','black'\n            ],\n            colorsSequential:     false,\n            colorsStroke:         'rgba(0,0,0,0)',\n            \n            errorbars:            null,\n            \n            marginInner:          3,\n            marginInnerGrouped:   2,\n            marginInnerLeft:      0,\n            marginInnerRight:     0,\n\n            yaxis:                true,\n            yaxisTickmarks:       true,\n            yaxisTickmarksLength: 3,\n            yaxisColor:           'black',\n            yaxisScale:           true,\n            yaxisLabels:          null,\n            yaxisLabelsFont:      null,\n            yaxisLabelsSize:      null,\n            yaxisLabelsColor:     null,\n            yaxisLabelsBold:      null,\n            yaxisLabelsItalic:    null,\n            yaxisLabelsOffsetx:   0,\n            yaxisLabelsOffsety:   0,\n            yaxisLabelsCount:     5,\n            yaxisScaleUnitsPre:   '',\n            yaxisScaleUnitsPost:  '',\n            yaxisScaleStrict:     false,\n            yaxisScaleDecimals:   0,\n            yaxisScalePoint:      '.',\n            yaxisScaleThousand:   ',',\n            yaxisScaleRound:      false,\n            yaxisScaleMax:        null,\n            yaxisScaleMin:        0,\n            yaxisScaleFormatter:  null,\n            yaxisTitle:           '',\n            yaxisTitleBold:       null,\n            yaxisTitleSize:       null,\n            yaxisTitleFont:       null,\n            yaxisTitleColor:      null,\n            yaxisTitleItalic:     null,\n            yaxisTitleOffsetx:    0,\n            yaxisTitleOffsety:    0,\n            yaxisTitleX:          null,\n            yaxisTitleY:          null,\n            yaxisTitleHalign:     null,\n            yaxisTitleValign:     null,\n\n            xaxis:                true,\n            xaxisTickmarks:       true,\n            xaxisTickmarksLength: 5,\n            xaxisLabels:          null,\n            xaxisLabelsFont:      null,\n            xaxisLabelsSize:      null,\n            xaxisLabelsColor:     null,\n            xaxisLabelsBold:      null,\n            xaxisLabelsItalic:    null,\n            xaxisLabelsPosition:  'section',\n            xaxisLabelsPositionSectionTickmarksCount: null,\n            xaxisLabelsOffsetx:   0,\n            xaxisLabelsOffsety:   0,\n            xaxisLabelsFormattedDecimals:  0,\r\n            xaxisLabelsFormattedPoint:     '.',\r\n            xaxisLabelsFormattedThousand:  ',',\r\n            xaxisLabelsFormattedUnitsPre:  '',\r\n            xaxisLabelsFormattedUnitsPost: '',\n            xaxisColor:           'black',\n            xaxisTitle:           '',\n            xaxisTitleBold:       null,\n            xaxisTitleSize:       null,\n            xaxisTitleFont:       null,\n            xaxisTitleColor:      null,\n            xaxisTitleItalic:     null,\n            xaxisTitleOffsetx:    0,\n            xaxisTitleOffsety:    0,\n            xaxisTitleX:          null,\n            xaxisTitleY:          null,\n            xaxisTitleHalign:     null,\n            xaxisTitleValign:     null,\n\n            labelsAbove:                  false,\n            labelsAboveFont:              null,\n            labelsAboveSize:              null,\n            labelsAboveBold:              null,\n            labelsAboveItalic:            null,\n            labelsAboveColor:             null,\n            labelsAboveBackground:        null,\n            labelsAboveBackgroundPadding: 0,\n            labelsAboveUnitsPre:          null,\n            labelsAboveUnitsPost:         null,\n            labelsAbovePoint:             null,\n            labelsAboveThousand:          null,\n            labelsAboveFormatter:         null,\n            labelsAboveDecimals:          null,\n            labelsAboveOffsetx:           0,\n            labelsAboveOffsety:           0,\n            labelsAboveHalign:            'center',\n            labelsAboveValign:            'bottom',\n            labelsAboveSpecific:          null,\n            \n            textColor:            'black',\n            textFont:             'Arial, Verdana, sans-serif',\n            textSize:             12,\n            textBold:             false,\n            textItalic:           false,\n            text:                 null,\n\n            linewidth:            1,\n            grouping:             'grouped',\n            \n            tooltips:                        null,\n            tooltipsOverride:                null,\n            tooltipsEffect:                  'fade',\n            tooltipsCssClass:                'RGraph_tooltip',\n            tooltipsCss:                     null,\n            tooltipsEvent:                   'click',\n            tooltipsFormattedThousand:       ',',\n            tooltipsFormattedPoint:          '.',\n            tooltipsFormattedDecimals:       0,\n            tooltipsFormattedUnitsPre:       '',\n            tooltipsFormattedUnitsPost:      '',\n            tooltipsFormattedKeyColors:      null,\n            tooltipsFormattedKeyColorsShape: 'square',\n            tooltipsFormattedKeyLabels:      [],\n            tooltipsFormattedTableHeaders:   null,\n            tooltipsFormattedTableData:      null,\n            tooltipsPointer:                 true,\n            tooltipsPositionStatic:          true,\n\n            highlightStroke:      'rgba(0,0,0,0)',\n            highlightFill:        'rgba(255,255,255,0.7)',\n            highlightLinewidth:   1,\n            \n            title:                '',\n            titleX:               null,\n            titleY:               null,\n            titleHalign:          'center',\n            //titleValign:          null,\n            titleSize:            null,\n            titleColor:           null,\n            titleFont:            null,\n            titleBold:            null,\n            titleItalic:          null,\n            \n            titleSubtitle:        null,\n            titleSubtitleSize:    null,\n            titleSubtitleColor:   '#aaa',\n            titleSubtitleFont:    null,\n            titleSubtitleBold:    null,\n            titleSubtitleItalic:  null,\n            \n            shadow:               false,\n            shadowOffsetx:        2,\n            shadowOffsety:        2,\n            shadowBlur:           2,\n            shadowOpacity:        0.25,\n            \n            errorbars:            null,\n            errorbarsColor:       'black',\n            errorbarsLinewidth:   1,\n            errorbarsCapwidth:    10,\n\n            key:            null,\n            keyColors:      null,\n            keyOffsetx:     0,\n            keyOffsety:     0,\n            keyLabelsOffsetx: 0,\n            keyLabelsOffsety: -1,\n            keyLabelsColor:   null,\n            keyLabelsSize:    null,\n            keyLabelsBold:    null,\n            keyLabelsItalic:  null,\n            keyLabelsFont:    null\n        };\n\n\n\n\n        //\n        // Copy the global object properties to this instance\n        //\n        RGraph.SVG.getGlobals(this);\n\n\n\n\n\n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.SVG.FX && typeof RGraph.SVG.FX.decorate === 'function') {\n            RGraph.SVG.FX.decorate(this);\n        }\n\n\n\n\n\n        // Add the responsive function to the object\n        this.responsive = RGraph.SVG.responsive;\n\n\n        //  Add the create function to the object. The create()\n        // function is defined in the SVG core library\n        RGraph.SVG.addCreateFunction(this);\n\n\n\n\n\n\n        // A shortcut\n        var properties = this.properties;\n\n\n\n\n\n\n\n\n        //\n        // The draw method draws the Bar chart\n        //\n        this.draw = function ()\n        {\n            // Fire the beforedraw event\n            RGraph.SVG.fireCustomEvent(this, 'onbeforedraw');\n\n\n            // Should the first thing that's done inthe.draw() function\n            // except for the onbeforedraw event\n            this.width  = Number(this.svg.getAttribute('width'));\n            this.height = Number(this.svg.getAttribute('height'));\n\n\n            // Zero these if the 3D effect is not wanted\n            if (properties.variant !== '3d') {\n                properties.variant3dOffsetx = 0;\n                properties.variant3dOffsety = 0;\n\n            } else {\n\n                // Set the skew transform on the all group if necessary\n                this.svg.all.setAttribute('transform', 'skewY(5)');\n            }\n\n\n\n            // Create the defs tag if necessary\n            RGraph.SVG.createDefs(this);\n\n            \n\n\n\n\n\n            // Reset the coords array\n            this.coords  = [];\n            this.coords2 = [];\n\n\n            this.graphWidth  = this.width - properties.marginLeft - properties.marginRight;\n            this.graphHeight = this.height - properties.marginTop - properties.marginBottom;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            // Make the data sequential first\n            this.data_seq = RGraph.SVG.arrayLinearize(this.data);\n\n            // This allows the errorbars to be a variety of formats and convert\n            // them all into an array of objects which have the min and max\n            // properties set\n            if (properties.errorbars) {\n                // Go through the error bars and convert numbers to objects\n                for (var i=0; i<this.data_seq.length; ++i) {\n    \n                    if (typeof properties.errorbars[i] === 'undefined' || RGraph.SVG.isNull(properties.errorbars[i]) ) {\n                        properties.errorbars[i] = {max: null, min: null};\n                    \n                    } else if (typeof properties.errorbars[i] === 'number') {\n                        properties.errorbars[i] = {\n                            min: properties.errorbars[i],\n                            max: properties.errorbars[i]\n                        };\n                    \n                    // Max is undefined\n                    } else if (typeof properties.errorbars[i] === 'object' && typeof properties.errorbars[i].max === 'undefined') {\n                        properties.errorbars[i].max = null;\n                    \n                    // Min is not defined\n                    } else if (typeof properties.errorbars[i] === 'object' && typeof properties.errorbars[i].min === 'undefined') {\n                        properties.errorbars[i].min = null;\n                    }\n                }\n            }\n\n\n\n\n\n\n\n\n\n\n            //\n            // Parse the colors. This allows for simple gradient syntax\n            //\n\n            // Parse the colors for gradients\n            RGraph.SVG.resetColorsToOriginalValues({object:this});\n            this.parseColors();\n\n\n\n            // Go through the data and work out the maximum value\n            // This now also accounts for errorbars\n            var values = [];\n\n            for (var i=0,max=0; i<this.data.length; ++i) {\n                \n                // Errorbars affect the max value\n                if (properties.errorbars && typeof properties.errorbars[i] === 'number') {\n                    var errorbar = properties.errorbars[i];\n                } else if (properties.errorbars && typeof properties.errorbars[i] === 'object' && typeof  properties.errorbars[i].max === 'number') {\n                    var errorbar = properties.errorbars[i].max;\n                } else {\n                    var errorbar = 0;\n                }\n\n\n                if (typeof this.data[i] === 'number') {\n                    values.push(this.data[i] + errorbar);\n                \n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'grouped') {\n                    values.push(RGraph.SVG.arrayMax(this.data[i]) + errorbar);\n\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'stacked') {\n                    values.push(RGraph.SVG.arraySum(this.data[i]) + errorbar);\n                }\n            }\n            var max = RGraph.SVG.arrayMax(values);\n\n            // A custom, user-specified maximum value\n            if (typeof properties.yaxisScaleMax === 'number') {\n                max = properties.yaxisScaleMax;\n            }\n\n            // Set the ymin to zero if it's set mirror\n            if (properties.yaxisScaleMin === 'mirror' || properties.yaxisScaleMin === 'middle' || properties.yaxisScaleMin === 'center') {\n                this.mirrorScale = true;\n                var mirrorScale = true;\n                properties.yaxisScaleMin   = 0;\n            }\n\n\n            //\n            // Generate an appropiate scale\n            //\n            this.scale = RGraph.SVG.getScale({\n                object:    this,\n                numlabels: properties.yaxisLabelsCount,\n                unitsPre:  properties.yaxisScaleUnitsPre,\n                unitsPost: properties.yaxisScaleUnitsPost,\n                max:       max,\n                min:       properties.yaxisScaleMin,\n                point:     properties.yaxisScalePoint,\n                round:     properties.yaxisScaleRound,\n                thousand:  properties.yaxisScaleThousand,\n                decimals:  properties.yaxisScaleDecimals,\n                strict:    typeof properties.yaxisScaleMax === 'number',\n                formatter: properties.yaxisScaleFormatter\n            });\n\n\n\n            //\n            // Get the scale a second time if the ymin should be mirored\n            //\n            // Set the ymin to zero if it's set mirror\n            if (mirrorScale) {\n                this.scale = RGraph.SVG.getScale({\n                    object: this,\n                    numlabels: properties.yaxisLabelsCount,\n                    unitsPre:  properties.yaxisScaleUnitsPre,\n                    unitsPost: properties.yaxisScaleUnitsPost,\n                    max:       this.scale.max,\n                    min:       this.scale.max * -1,\n                    point:     properties.yaxisScalePoint,\n                    round:     false,\n                    thousand:  properties.yaxisScaleThousand,\n                    decimals:  properties.yaxisScaleDecimals,\n                    strict:    typeof properties.yaxisScaleMax === 'number',\n                    formatter: properties.yaxisScaleFormatter\n                });\n            }\n\n            // Now the scale has been generated adopt its max value\n            this.max      = this.scale.max;\n            this.min      = this.scale.min;\n\n// Commenting these two lines out allows the data to change and\n// subsequently a new max can be generated to accommodate the\n// new data\n//properties.yaxisScaleMax = this.scale.max;\n//properties.yaxisScaleMin = this.scale.min;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            // Draw the background first\n            RGraph.SVG.drawBackground(this);\n\n\n\n            // Draw the threeD axes here so everything else is drawn on top of\n            // it, but after the scale generation\n            if (properties.variant === '3d') {\n\n\n\n\n                // Draw the 3D Y axis\n                RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svg.all,\n                    type: 'path',\n                    attr: {\n                        d: 'M {1} {2} L {3} {4} L {5} {6} L {7} {8}'.format(\n                            properties.marginLeft,\n                            properties.marginTop,\n                            \n                            properties.marginLeft + properties.variant3dOffsetx,\n                            properties.marginTop - properties.variant3dOffsety,\n                            \n                            properties.marginLeft + properties.variant3dOffsetx,\n                            this.height - properties.marginBottom - properties.variant3dOffsety,\n                            \n                            properties.marginLeft,\n                            this.height - properties.marginBottom,\n                            \n                            properties.marginLeft,\n                            properties.marginTop\n                        ),\n                        fill: '#ddd',\n                        stroke: '#ccc'\n                    }\n                });\n\n\n\n\n                // Add the group that the negative bars are added to. This makes them\n                // appear below the axes\n                this.threed_xaxis_group = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'g',\n                    parent: this.svg.all,\n                    attr: {\n                        className: 'rgraph_3d_bar_xaxis_negative'\n                    }\n                });\n\n\n\n                // Draw the 3D X axis\n                RGraph.SVG.create({\n                    svg: this.svg,\n                    parent: this.svg.all,\n                    type: 'path',\n                    attr: {\n                        d: 'M {1} {2} L {3} {4} L {5} {6} L {7} {8}'.format(\n                            properties.marginLeft,\n                            this.getYCoord(0),\n                            \n                            properties.marginLeft + properties.variant3dOffsetx,\n                            this.getYCoord(0) - properties.variant3dOffsety,\n                            \n                            this.width - properties.marginRight + properties.variant3dOffsetx,\n                            this.getYCoord(0) - properties.variant3dOffsety,\n                            \n                            this.width - properties.marginRight,\n                            this.getYCoord(0),\n                            \n                            properties.marginLeft,\n                            this.getYCoord(0)\n                        ),\n                        fill: '#ddd',\n                        stroke: '#ccc'\n                    }\n                });\n            }\n\n\n\n\n\n\n            // Draw the bars\n            this.drawBars();\n\n\n\n\n            //\n            // If the xaxisLabels option is a string then turn it\n            // into an array.\n            //\n            if (properties.xaxisLabels && properties.xaxisLabels.length) {\n                if (typeof properties.xaxisLabels === 'string') {\n                    properties.xaxisLabels = RGraph.SVG.arrayPad({\n                        array:  [],\n                        length: this.data.length,\n                        value:  properties.xaxisLabels\n                    });\n                }\n\n                // Label substitution\n                //\n                for (var i=0; i<properties.xaxisLabels.length; ++i) {\n                    properties.xaxisLabels[i] = RGraph.SVG.labelSubstitution({\n                        object:    this,\n                        text:      properties.xaxisLabels[i],\n                        index:     i,\n                        value:     this.data[i],\n                        decimals:  properties.xaxisLabelsFormattedDecimals  || 0,\n                        unitsPre:  properties.xaxisLabelsFormattedUnitsPre  || '',\n                        unitsPost: properties.xaxisLabelsFormattedUnitsPost || '',\n                        thousand:  properties.xaxisLabelsFormattedThousand  || ',',\n                        point:     properties.xaxisLabelsFormattedPoint     || '.'\n                    });\n                }\n            }\n\n\n\n\n            // Draw the axes over the bars\n            RGraph.SVG.drawXAxis(this);\n            RGraph.SVG.drawYAxis(this);\n            \n            \n            // Draw the labelsAbove labels\n            this.drawLabelsAbove();\n\n\n\n            \n            \n            // Draw the key\n            if (typeof properties.key !== null && RGraph.SVG.drawKey) {\n                RGraph.SVG.drawKey(this);\n            } else if (!RGraph.SVG.isNull(properties.key)) {\n                alert('The drawKey() function does not exist - have you forgotten to include the key library?');\n            }\n\n\n\n            \n            \n\n\n\n\n            // Add the event listener that clears the highlight rect if\n            // there is any. Must be MOUSEDOWN (ie before the click event)\n            //var obj = this;\n            //document.body.addEventListener('mousedown', function (e)\n            //{\n            //    //RGraph.SVG.removeHighlight(obj);\n            //\n            //}, false);\n\n\n\n\n\n\n\n\n            //\n            // Allow the addition of custom text via the\n            // text: property.\n            //\n            RGraph.SVG.addCustomText(this);\n\n\n\n\n\n\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.SVG.fireCustomEvent(this, 'onfirstdraw');\n            }\n\n\n\n\n\n\n\n            // Fire the draw event\n            RGraph.SVG.fireCustomEvent(this, 'ondraw');\n\n\n\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the bars\n        //\n        this.drawBars = function ()\n        {\n            var y = this.getYCoord(0);\n\n            if (properties.shadow) {\n                RGraph.SVG.setShadow({\n                    object:  this,\n                    offsetx: properties.shadowOffsetx,\n                    offsety: properties.shadowOffsety,\n                    blur:    properties.shadowBlur,\n                    opacity: properties.shadowOpacity,\n                    id:      'dropShadow'\n                });\n            }\n\n            // Go through the bars\n            for (var i=0,sequentialIndex=0; i<this.data.length; ++i,++sequentialIndex) {\n\n                //\n                // REGULAR BARS\n                //\n                if (typeof this.data[i] === 'number') {\n\n                    var outerSegment = (this.graphWidth - properties.marginInnerLeft - properties.marginInnerRight) / this.data.length,\n                        height       = (Math.abs(this.data[i]) - Math.abs(this.scale.min)) / (Math.abs(this.scale.max) - Math.abs(this.scale.min)) * this.graphHeight,\n                        width        = ( (this.graphWidth - properties.marginInnerLeft - properties.marginInnerRight) / this.data.length) - properties.marginInner - properties.marginInner,\n                        x            = properties.marginLeft + properties.marginInner + properties.marginInnerLeft + (outerSegment * i);\n\n                    // Work out the height and the Y coord of the Bar\n                    if (this.scale.min >= 0 && this.scale.max > 0) {\n                        y = this.getYCoord(this.scale.min) - height;\n\n                    } else if (this.scale.min < 0 && this.scale.max > 0) {\n                        height = (Math.abs(this.data[i]) / (this.scale.max - this.scale.min)) * this.graphHeight;\n                        y      = this.getYCoord(0) - height;\n                        \n                        if (this.data[i] < 0) {\n                            y = this.getYCoord(0);\n                        }\n                    } else if (this.scale.min < 0 && this.scale.max < 0) {\n                        height = (Math.abs(this.data[i]) - Math.abs(this.scale.max)) / (Math.abs(this.scale.min) - Math.abs(this.scale.max)) * this.graphHeight;\n                        y = properties.marginTop;\n                    }\n\n\n\n\n\n\n\n\n\n                    var rect = RGraph.SVG.create({\n                        svg: this.svg,\n                        type: 'rect',\n                        parent: properties.variant === '3d' && this.data[i] < 0 ? this.threed_xaxis_group : this.svg.all, \n                        attr: {\n                            stroke: properties.colorsStroke,\n                            fill: properties.colorsSequential ? (properties.colors[sequentialIndex] ? properties.colors[sequentialIndex] : properties.colors[properties.colors.length - 1]) : properties.colors[0],\n                            x: x,\n                            y: y,\n                            width: width < 0 ? 0 : width,\n                            height: height,\n                            'stroke-width': properties.linewidth,\n                            'data-original-x': x,\n                            'data-original-y': y,\n                            'data-original-width': width,\n                            'data-original-height': height,\n                            'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[i] : '',\n                            'data-index': i,\n                            'data-sequential-index': sequentialIndex,\n                            'data-value': this.data[i],\n                            filter: properties.shadow ? 'url(#dropShadow)' : ''\n                        }\n                    });\n\n\n\n\n\n\n\n\n\n                    // Draw the errorbar if required\n                    this.drawErrorbar({\n                        object:    this,\n                        element:   rect,\n                        index:     i,\n                        value:     this.data[i],\n                        type:      'normal'\n                    });\n\n\n\n\n\n                    this.coords.push({\n                        object:  this,\n                        element: rect,\n                        x:      parseFloat(rect.getAttribute('x')),\n                        y:      parseFloat(rect.getAttribute('y')),\n                        width:  parseFloat(rect.getAttribute('width')),\n                        height: parseFloat(rect.getAttribute('height'))\n                    });\n\n                    if (!this.coords2[0]) {\n                        this.coords2[0] = [];\n                    }\n                \n                    this.coords2[0].push({\n                        object:  this,\n                        element: rect,\n                        x:      parseFloat(rect.getAttribute('x')),\n                        y:      parseFloat(rect.getAttribute('y')),\n                        width:  parseFloat(rect.getAttribute('width')),\n                        height: parseFloat(rect.getAttribute('height'))\n                    });\n\n\n\n                    //\n                    // Add the 3D faces if required\n                    //\n                    if (properties.variant === '3d') {\n                        this.drawTop3dFace({rect: rect, value: this.data[i]});\n                        this.drawSide3dFace({rect: rect, value: this.data[i]});\n                    }\n\n\n\n\n\n                    // Add the tooltip data- attribute\n                    if (   !RGraph.SVG.isNull(properties.tooltips)\n                        && (!RGraph.SVG.isNull(properties.tooltips[sequentialIndex]) || typeof properties.tooltips === 'string')\n                       ) {\n\n                        var obj = this;\n\n                        //\n                        // Add tooltip event listeners\n                        //\n                        (function (idx, seq)\n                        {\n                            rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                            {\n                                obj.removeHighlight();\n\n                                // Show the tooltip\n                                RGraph.SVG.tooltip({\n                                    object: obj,\n                                     index: idx,\n                                     group: null,\n                           sequentialIndex: seq,\n                                      text: typeof properties.tooltips === 'string' ?  properties.tooltips : properties.tooltips[seq],\n                                     event: e\n                                });\n                                \n                                // Highlight the rect that has been clicked on\n                                obj.highlight(e.target);\n                            }, false);\n\n                            rect.addEventListener('mousemove', function (e)\n                            {\n                                e.target.style.cursor = 'pointer'\n                            }, false);\n                        })(i, sequentialIndex);\n                    }\n\n\n\n\n\n                //\n                // GROUPED BARS\n                //\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'grouped') {\n\n                    var outerSegment = ( (this.graphWidth - properties.marginInnerLeft - properties.marginInnerRight) / this.data.length),\n                        innerSegment = outerSegment - (2 * properties.marginInner);\n\n                    // Loop through the group\n                    for (var j=0; j<this.data[i].length; ++j,++sequentialIndex) {\n\n                        var width  = ( (innerSegment - ((this.data[i].length - 1) * properties.marginInnerGrouped)) / this.data[i].length),\n                            x      = (outerSegment * i) + properties.marginInner + properties.marginLeft + properties.marginInnerLeft + (j * width) + ((j - 1) * properties.marginInnerGrouped);\n                        \n                        x = properties.marginLeft + properties.marginInnerLeft + (outerSegment * i) + (width * j) + properties.marginInner + (j * properties.marginInnerGrouped);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Calculate the height\n// eg 0 -> 10\nif (this.scale.min === 0 && this.scale.max > this.scale.min) {\n    var height = ((this.data[i][j] - this.scale.min) / (this.scale.max - this.scale.min)) * this.graphHeight,\n             y = this.getYCoord(0) - height;\n\n// eg -5 -> -15\n} else if (this.scale.max <= 0 && this.scale.min < this.scale.max) {\n    var height = ((this.data[i][j] - this.scale.max) / (this.scale.max - this.scale.min)) * this.graphHeight,\n             y = this.getYCoord(this.scale.max);\n    \n    height = Math.abs(height);\n\n// eg 10 -> -10\n} else if (this.scale.max > 0 && this.scale.min < 0) {\n\n    var height = (Math.abs(this.data[i][j]) / (this.scale.max - this.scale.min)) * this.graphHeight,\n             y = this.data[i][j] < 0 ? this.getYCoord(0) : this.getYCoord(this.data[i][j]);\n\n// eg 5 -> 10\n} else if (this.scale.min > 0 && this.scale.max > this.scale.min) {\n    var height = (Math.abs(this.data[i][j] - this.scale.min) / (this.scale.max - this.scale.min)) * this.graphHeight,\n             y = this.getYCoord(this.scale.min) - height;\n}\n\n\n\n\n\n\n\n                        // Add the rect tag\n                        var rect = RGraph.SVG.create({\n                            svg: this.svg,\n                            parent: properties.variant === '3d' && this.data[i][j] < 0 ? this.threed_xaxis_group : this.svg.all,\n                            type: 'rect',\n                            attr: {\n                                stroke: properties.colorsStroke,\n                                fill: (properties.colorsSequential && properties.colors[sequentialIndex]) ? properties.colors[sequentialIndex] : properties.colors[j],\n                                x: x,\n                                y: y,\n                                width: width,\n                                height: height,\n                                'stroke-width': properties.linewidth,\n                                'data-original-x': x,\n                                'data-original-y': y,\n                                'data-original-width': width,\n                                'data-original-height': height,\n                                'data-index': i,\n                                'data-subindex': j,\n                                'data-sequential-index': sequentialIndex,\n                                'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[sequentialIndex] : '',\n                                'data-value': this.data[i][j],\n                                filter: properties.shadow ? 'url(#dropShadow)' : ''\n                            }\n                        });\n\n\n\n\n\n\n\n\n\n\n                        // Draw the errorbar if required\n                        this.drawErrorbar({\n                            object:    this,\n                            element:   rect,\n                            index:     sequentialIndex,\n                            value:     this.data[i][j],\n                            type:      'grouped'\n                        });\n\n\n\n\n\n\n\n\n\n\n                        this.coords.push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n                    \n                        if (!this.coords2[i]) {\n                            this.coords2[i] = [];\n                        }\n                    \n                        this.coords2[i].push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n\n\n\n                        //\n                        // Add the 3D faces if required\n                        //\n                        if (properties.variant === '3d') {\n                            this.drawTop3dFace({rect: rect, value: this.data[i][j]});\n                            this.drawSide3dFace({rect: rect, value: this.data[i][j]});\n                        }\n\n\n\n\n\n\n\n                        // Add the tooltip data- attribute\n                        if (   !RGraph.SVG.isNull(properties.tooltips)\n                            && (properties.tooltips[sequentialIndex] || typeof properties.tooltips === 'string')\n                           ) {\n\n                            var obj = this;\n    \n                        \n                            //\n                            // Add tooltip event listeners\n                            //\n                            (function (idx, seq)\n                            {\n                                obj.removeHighlight();\n\n                                var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n\n                                rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                                {\n                                    // Show the tooltip\n                                    RGraph.SVG.tooltip({\n                                        object: obj,\n                                        group: idx,\n                                        index: indexes[1],\n                                        sequentialIndex: seq,\n                                        text: typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[seq],\n                                        event: e\n                                    });\n                                    \n                                    // Highlight the rect that has been clicked on\n                                    obj.highlight(e.target);\n    \n                                }, false);\n                                \n                                rect.addEventListener('mousemove', function (e)\n                                {\n                                    e.target.style.cursor = 'pointer'\n                                }, false);\n                            })(i, sequentialIndex);\n                        }\n                    }\n\n                    --sequentialIndex;\n\n\n\n\n\n\n\n\n\n\n                //\n                // STACKED CHARTS\n                //\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'stacked') {\n\n                    var section = ( (this.graphWidth - properties.marginInnerLeft - properties.marginInnerRight) / this.data.length);\n\n                    \n                    // Intialise the Y coordinate to the bottom gutter\n                    var y = this.getYCoord(0);\n\n                    \n\n                    // Loop through the stack\n                    for (var j=0; j<this.data[i].length; ++j,++sequentialIndex) {\n\n                        var height  = (this.data[i][j] / (this.max - this.min)) * this.graphHeight,\n                            width   = section - (2 * properties.marginInner),\n                            x       = properties.marginLeft + properties.marginInnerLeft + (i * section) + properties.marginInner,\n                            y       = y - height;\n\n                        // If this is the first iteration of the loop and a shadow\n                        // is requested draw a rect here to create it.\n                        if (j === 0 && properties.shadow) {\n                            \n                            var fullHeight = (RGraph.SVG.arraySum(this.data[i]) / (this.max - this.min)) * this.graphHeight;\n\n                            var rect = RGraph.SVG.create({\n                                svg: this.svg,\n                                parent: this.svg.all,\n                                type: 'rect',\n                                attr: {\n                                    fill: 'white',\n                                    x: x,\n                                    y: this.height - properties.marginBottom - fullHeight,\n                                    width: width,\n                                    height: fullHeight,\n                                    'stroke-width': 0,\n                                    'data-index': i,\n                                    filter: 'url(#dropShadow)'\n                                }\n                            });\n                            \n                            this.stackedBackfaces[i] = rect;\n                        }\n\n\n\n                        // Create the visible bar\n                        var rect = RGraph.SVG.create({\n                            svg: this.svg,\n                            parent: this.svg.all,\n                            type: 'rect',\n                            attr: {\n                                stroke: properties.colorsStroke,\n                                fill: properties.colorsSequential ? (properties.colors[sequentialIndex] ? properties.colors[sequentialIndex] : properties.colors[properties.colors.length - 1]) : properties.colors[j],\n                                x: x,\n                                y: y,\n                                width: width,\n                                height: height,\n                                'stroke-width': properties.linewidth,\n                                'data-original-x': x,\n                                'data-original-y': y,\n                                'data-original-width': width,\n                                'data-original-height': height,\n                                'data-index': i,\n                                'data-subindex': j,\n                                'data-sequential-index': sequentialIndex,\n                                'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[sequentialIndex] : '',\n                                'data-value': this.data[i][j]\n                            }\n                        });\n\n\n\n\n\n\n\n                        // Draw the errorbar if required\n                        if (j === (this.data[i].length - 1)) {\n\n                            this.drawErrorbar({\n                                object:    this,\n                                element:   rect,\n                                index:     i,\n                                value:     this.data[i][j],\n                                type:      'stacked'\n                            });\n                        }\n\n\n\n\n\n\n\n\n\n                        this.coords.push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n                        if (!this.coords2[i]) {\n                            this.coords2[i] = [];\n                        }\n                    \n                        this.coords2[i].push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n\n\n\n\n\n                        //\n                        // Add the 3D faces if required\n                        //\n                        if (properties.variant === '3d') {\n                            this.drawTop3dFace({rect: rect, value: this.data[i][j]});\n                            this.drawSide3dFace({rect: rect, value: this.data[i][j]});\n                        }\n\n\n\n\n\n\n\n\n                        // Add the tooltip data- attribute\n                        if (   !RGraph.SVG.isNull(properties.tooltips)\n                            && (properties.tooltips[sequentialIndex] || typeof properties.tooltips === 'string')\n                           ) {\n                        \n                            var obj = this;\n    \n                        \n                            //\n                            // Add tooltip event listeners\n                            //\n                            (function (idx, seq)\n                            {\n                                rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                                {\n                                    obj.removeHighlight();\n\n                                    var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n\n                                    // Show the tooltip\n                                    RGraph.SVG.tooltip({\n                                        object: obj,\n                                        index: indexes[1],\n                                        group: idx,\n                                        sequentialIndex: seq,\n                                        text: typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[seq],\n                                        event: e\n                                    });\n                                    \n                                    // Highlight the rect that has been clicked on\n                                    obj.highlight(e.target);\n                                }, false);\n                                \n                                rect.addEventListener('mousemove', function (e)\n                                {\n                                    e.target.style.cursor = 'pointer';\n                                }, false);\n                            })(i, sequentialIndex);\n                        }\n                    }\n\n                    --sequentialIndex;\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to retrieve the relevant Y coordinate for a\n        // particular value.\n        // \n        // @param int value The value to get the Y coordinate for\n        //\n        this.getYCoord = function (value)\n        {\n            if (value > this.scale.max) {\n                return null;\n            }\n\n            var y, xaxispos = properties.xaxispos;\n\n            if (value < this.scale.min) {\n                return null;\n            }\n\n            y  = ((value - this.scale.min) / (this.scale.max - this.scale.min));\n\n            y *= (this.height - properties.marginTop - properties.marginBottom);\n\n            y = this.height - properties.marginBottom - y;\n\n            return y;\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to highlight a bar on the chart\n        // \n        // @param object rect The rectangle to highlight\n        //\n        this.highlight = function (rect)\n        {\n            var x      = parseFloat(rect.getAttribute('x')) - 0.5,\n                y      = parseFloat(rect.getAttribute('y')) - 0.5,\n                width  = parseFloat(rect.getAttribute('width')) + 1,\n                height = parseFloat(rect.getAttribute('height')) + 1;\n            \n            var highlight = RGraph.SVG.create({\n                svg: this.svg,\n                parent: this.svg.all,\n                type: 'rect',\n                attr: {\n                    stroke: properties.highlightStroke,\n                    fill: properties.highlightFill,\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    'stroke-width': properties.highlightLinewidth\n                },\n                style: {\n                    pointerEvents: 'none'\n                }\n            });\n\n\n            if (properties.tooltipsEvent === 'mousemove') {\n                \n                //var obj = this;\n                \n                //highlight.addEventListener('mouseout', function (e)\n                //{\n                //    obj.removeHighlight();\n                //    RGraph.SVG.hideTooltip();\n                //    RGraph.SVG.REG.set('highlight', null);\n                //}, false);\n            }\n\n\n            // Store the highlight rect in the rebistry so\n            // it can be cleared later\n            RGraph.SVG.REG.set('highlight', highlight);\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function () \n        {\n            // Save the original colors so that they can be restored when\n            // the canvas is cleared\n            if (!Object.keys(this.originalColors).length) {\n                this.originalColors = {\n                    colors:              RGraph.SVG.arrayClone(properties.colors),\n                    backgroundGridColor: RGraph.SVG.arrayClone(properties.backgroundGridColor),\n                    highlightFill:       RGraph.SVG.arrayClone(properties.highlightFill),\n                    backgroundColor:     RGraph.SVG.arrayClone(properties.backgroundColor)\n                }\n            }\n\n\n            // colors\n            var colors = properties.colors;\n\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = RGraph.SVG.parseColorLinear({\n                        object: this,\n                        color: colors[i]\n                    });\n                }\n            }\n\n            properties.backgroundGridColor = RGraph.SVG.parseColorLinear({object: this, color: properties.backgroundGridColor});\n            properties.highlightFill       = RGraph.SVG.parseColorLinear({object: this, color: properties.highlightFill});\n            properties.backgroundColor     = RGraph.SVG.parseColorLinear({object: this, color: properties.backgroundColor});\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the labelsAbove\n        //\n        this.drawLabelsAbove = function ()\n        {\n            // Go through the above labels\n            if (properties.labelsAbove) {\n\n                var data_seq      = RGraph.SVG.arrayLinearize(this.data),\n                    seq           = 0,\n                    stacked_total = 0;;\n\n                for (var i=0; i<this.coords.length; ++i,seq++) {\n                    \n                    var num = typeof this.data[i] === 'number' ? this.data[i] : data_seq[seq] ;\n\n            \n            \n            \n            \n                    // If this is a stacked chart then only dothe label\n                    // if it's the top segment\n                    if (properties.grouping === 'stacked') {\n                        \n                        var indexes   = RGraph.SVG.sequentialIndexToGrouped(i, this.data);\n                        var group     = indexes[0];\n                        var datapiece = indexes[1];\n\n                        if (datapiece !== (this.data[group].length - 1) ) {\n                            continue;\n                        } else {\n                            num = RGraph.SVG.arraySum(this.data[group]);\n                        }\n                    }\n\n\n\n\n\n                    var str = RGraph.SVG.numberFormat({\n                        object:    this,\n                        num:       num.toFixed(properties.labelsAboveDecimals),\n                        prepend:   typeof properties.labelsAboveUnitsPre  === 'string'   ? properties.labelsAboveUnitsPre  : null,\n                        append:    typeof properties.labelsAboveUnitsPost === 'string'   ? properties.labelsAboveUnitsPost : null,\n                        point:     typeof properties.labelsAbovePoint     === 'string'   ? properties.labelsAbovePoint     : null,\n                        thousand:  typeof properties.labelsAboveThousand  === 'string'   ? properties.labelsAboveThousand  : null,\n                        formatter: typeof properties.labelsAboveFormatter === 'function' ? properties.labelsAboveFormatter : null\n                    });\n\n                    // Facilitate labelsAboveSpecific\n                    if (properties.labelsAboveSpecific && properties.labelsAboveSpecific.length && (typeof properties.labelsAboveSpecific[seq] === 'string' || typeof properties.labelsAboveSpecific[seq] === 'number') ) {\n                        str = properties.labelsAboveSpecific[seq];\n                    } else if ( properties.labelsAboveSpecific && properties.labelsAboveSpecific.length && typeof properties.labelsAboveSpecific[seq] !== 'string' && typeof properties.labelsAboveSpecific[seq] !== 'number') {\n                        continue;\n                    }\n\n                    var x = parseFloat(this.coords[i].element.getAttribute('x')) + parseFloat(this.coords[i].element.getAttribute('width') / 2) + properties.labelsAboveOffsetx;\n\n                    if (data_seq[i] >= 0) {\n                        var y = parseFloat(this.coords[i].element.getAttribute('y')) - 7 + properties.labelsAboveOffsety;\n                        var valign = properties.labelsAboveValign;\n                    } else {\n                        var y = parseFloat(this.coords[i].element.getAttribute('y')) + parseFloat(this.coords[i].element.getAttribute('height')) + 7 - properties.labelsAboveOffsety;\n                        var valign = properties.labelsAboveValign === 'top' ? 'bottom' : 'top';\n                    }\n                    \n                    var textConf = RGraph.SVG.getTextConf({\n                        object: this,\n                        prefix: 'labelsAbove'\n                    });\n\n                    RGraph.SVG.text({\n                        object:     this,\n                        parent:     this.svg.all,\n                        tag:        'labels.above',\n\n                        text:       str,\n                        \n                        x:          x,\n                        y:          y,\n                        \n                        halign:     properties.labelsAboveHalign,\n                        valign:     valign,\n\n                        font:       textConf.font,\n                        size:       textConf.size,\n                        bold:       textConf.bold,\n                        italic:     textConf.italic,\n                        color:      textConf.color,\n\n                        background: properties.labelsAboveBackground        || null,\n                        padding:    properties.labelsAboveBackgroundPadding || 0\n                    });\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method\n        // chaining\n        // \n        // @param string   type The type of even to add\n        // @param function func \n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n            }\n            \n            RGraph.SVG.addCustomEventListener(this, type, func);\n    \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        // \n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Remove highlight from the chart (tooltips)\n        //\n        this.removeHighlight = function ()\n        {\n            //var highlight = RGraph.SVG.REG.get('highlight');\n            //if (highlight && highlight.parentNode) {\n            //    highlight.parentNode.removeChild(highlight);\n            //}\n            \n            //RGraph.SVG.REG.set('highlight', null);\n            \n            RGraph.SVG.removeHighlight();\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the top of 3D bars\n        //\n        this.drawTop3dFace = function (opt)\n        {\n            var rect  = opt.rect,\n                arr   = [parseInt(rect.getAttribute('fill')), 'rgba(255,255,255,0.7)'],\n                x     = parseInt(rect.getAttribute('x')),\n                y     = parseInt(rect.getAttribute('y')),\n                w     = parseInt(rect.getAttribute('width')),\n                h     = parseInt(rect.getAttribute('height')),\n                value = parseFloat(rect.getAttribute('data-value'));\n\n\n            rect.rgraph_3d_top_face = [];\n\n\n            for (var i=0; i<2; ++i) {\n            \n                var color = (i === 0 ? rect.getAttribute('fill') : 'rgba(255,255,255,0.7)');\n\n                var face = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'path',\n                    parent: properties.variant === '3d' && opt.value < 0  ? this.threed_xaxis_group : this.svg.all,\n                    attr: {\n                        stroke: properties.colorsStroke,\n                        fill: color,\n                        'stroke-width': properties.linewidth,\n                        d: 'M {1} {2} L {3} {4} L {5} {6} L {7} {8}'.format(\n                            x,\n                            y,\n\n                            x + properties.variant3dOffsetx,\n                            y - properties.variant3dOffsety,\n\n                            x + w + properties.variant3dOffsetx,\n                            y - properties.variant3dOffsety,\n\n                            x + w,\n                            y\n                        )\n                    }\n                });\n\n\n\n                // Store a reference to the rect on the front face of the bar\n                rect.rgraph_3d_top_face[i] = face\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the top of 3D bars\n        //\n        this.drawSide3dFace = function (opt)\n        {\n            var rect  = opt.rect,\n                arr   = [parseInt(rect.getAttribute('fill')), 'rgba(0,0,0,0.3)'],\n                x     = parseInt(rect.getAttribute('x')),\n                y     = parseInt(rect.getAttribute('y')),\n                w     = parseInt(rect.getAttribute('width')),\n                h     = parseInt(rect.getAttribute('height'));\n            \n            rect.rgraph_3d_side_face = [];\n\n            for (var i=0; i<2; ++i) {\n            \n                var color = (i === 0 ? rect.getAttribute('fill') : 'rgba(0,0,0,0.3)');\n\n                var face = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'path',\n                    parent: properties.variant === '3d' && opt.value < 0  ? this.threed_xaxis_group : this.svg.all,\n                    attr: {\n                        stroke: properties.colorsStroke,\n                        fill: color,\n                        'stroke-width': properties.linewidth,\n                        d: 'M {1} {2} L {3} {4} L {5} {6} L {7} {8}'.format(\n                            x + w,\n                            y,\n\n                            x + w + properties.variant3dOffsetx,\n                            y - properties.variant3dOffsety,\n\n                            x + w + properties.variant3dOffsetx,\n                            y + h - properties.variant3dOffsety,\n\n                            x + w,\n                            y + h\n                        )\n                    }\n                });\n\n\n                // Store a reference to the rect on the front face of the bar\n                rect.rgraph_3d_side_face[i] = face\n            }\n        };\n\n\n\n\n\n\n\n\n        // This function is used to draw the errorbar. Its in the common\n        // file because it's used by multiple chart libraries\n        this.drawErrorbar = function (opt)\n        {\n            var index     = opt.index,\n                datapoint = opt.value,\n                linewidth = RGraph.SVG.getErrorbarsLinewidth({object: this, index: index}),\n                color     = RGraph.SVG.getErrorbarsColor({object: this, index: index}),\n                capwidth  = RGraph.SVG.getErrorbarsCapWidth({object: this, index: index}),\n                element   = opt.element,\n                type      = opt.type;\n            \n            \n\n            // Get the error bar value\n            var max = RGraph.SVG.getErrorbarsMaxValue({\n                object: this,\n                index: index\n            });\n\n            \n\n            // Get the error bar value\n            var min = RGraph.SVG.getErrorbarsMinValue({\n                object: this,\n                index: index\n            });\n\n\n\n\n            if (!max && !min) {\n                return;\n            }\n\n\n            // Accounts for stacked bars\n            if (type === 'stacked') {\n                datapoint = RGraph.SVG.arraySum(this.data[index]);\n            }\n\n\n            if (datapoint >= 0) {\n            \n                var x1 = parseFloat(element.getAttribute('x')) + (parseFloat(element.getAttribute('width')) / 2);\n\n                // Draw the UPPER vertical line\n                var errorbarLine = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'line',\n                    parent: this.svg.all,\n                    attr: {\n                        x1: x1,\n                        y1: parseFloat(element.getAttribute('y')),\n                        x2: x1,\n                        y2: this.getYCoord(parseFloat(datapoint + max)),\n                        stroke: color,\n                        'stroke-width': linewidth\n                    }\n                });\n    \n                // Draw the cap to the UPPER line\n                var errorbarCap = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'line',\n                    parent: this.svg.all,\n                    attr: {\n                        x1: parseFloat(errorbarLine.getAttribute('x1')) - (capwidth / 2),\n                        y1: errorbarLine.getAttribute('y2'),\n                        x2: parseFloat(errorbarLine.getAttribute('x1')) + (capwidth / 2),\n                        y2: errorbarLine.getAttribute('y2'),\n                        stroke: color,\n                        'stroke-width': linewidth\n                    }\n                });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                // Draw the minimum errorbar if necessary\n                if (typeof min === 'number') {\n\n                    var errorbarLine = RGraph.SVG.create({\n                        svg: this.svg,\n                        type: 'line',\n                        parent: this.svg.all,\n                        attr: {\n                            x1: x1,\n                            y1: parseFloat(element.getAttribute('y')),\n                            x2: x1,\n                            y2: this.getYCoord(parseFloat(datapoint - min)),\n                            stroke: color,\n                            'stroke-width': linewidth\n                        }\n                    });\n        \n                    // Draw the cap to the UPPER line\n                    var errorbarCap = RGraph.SVG.create({\n                        svg: this.svg,\n                        type: 'line',\n                        parent: this.svg.all,\n                        attr: {\n                            x1: parseFloat(errorbarLine.getAttribute('x1')) - (capwidth / 2),\n                            y1: errorbarLine.getAttribute('y2'),\n                            x2: parseFloat(errorbarLine.getAttribute('x1')) + (capwidth / 2),\n                            y2: errorbarLine.getAttribute('y2'),\n                            stroke: color,\n                            'stroke-width': linewidth\n                        }\n                    });\n                }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            } else if (datapoint < 0) {\n\n                var x1 = parseFloat(element.getAttribute('x')) + (parseFloat(element.getAttribute('width')) / 2),\n                    y1 = parseFloat(element.getAttribute('y')) + parseFloat(element.getAttribute('height')),\n                    y2 = this.getYCoord(parseFloat(datapoint - Math.abs(max) ))\n\n                // Draw the vertical line\n                var errorbarLine = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'line',\n                    parent: this.svg.all,\n                    attr: {\n                        x1: x1,\n                        y1: y1,\n                        x2: x1,\n                        y2: y2,\n                        stroke: color,\n                        'stroke-width': linewidth\n                    }\n                });\n\n                // Draw the cap to the vertical line\n                var errorbarCap = RGraph.SVG.create({\n                    svg: this.svg,\n                    type: 'line',\n                    parent: this.svg.all,\n                    attr: {\n                        x1: parseFloat(errorbarLine.getAttribute('x1')) - (capwidth / 2),\n                        y1: errorbarLine.getAttribute('y2'),\n                        x2: parseFloat(errorbarLine.getAttribute('x1')) + (capwidth / 2),\n                        y2: errorbarLine.getAttribute('y2'),\n                        stroke: color,\n                        'stroke-width': linewidth\n                    }\n                });\n\n\n\n\n\n\n\n\n\n\n\n\n                // Draw the minimum errorbar if necessary\n                if (typeof min === 'number') {\n\n                    var x1 = parseFloat(element.getAttribute('x')) + (parseFloat(element.getAttribute('width')) / 2);\n\n                    var errorbarLine = RGraph.SVG.create({\n                        svg: this.svg,\n                        type: 'line',\n                        parent: this.svg.all,\n                        attr: {\n                            x1: x1,\n                            y1: this.getYCoord(parseFloat(datapoint + min)),\n                            x2: x1,\n                            y2: this.getYCoord(parseFloat(datapoint)),\n                            stroke: color,\n                            'stroke-width': linewidth\n                        }\n                    });\n        \n                    // Draw the cap to the UPPER line\n                    var errorbarCap = RGraph.SVG.create({\n                        svg: this.svg,\n                        type: 'line',\n                        parent: this.svg.all,\n                        attr: {\n                            x1: parseFloat(errorbarLine.getAttribute('x1')) - (capwidth / 2),\n                            y1: errorbarLine.getAttribute('y1'),\n                            x2: parseFloat(errorbarLine.getAttribute('x1')) + (capwidth / 2),\n                            y2: errorbarLine.getAttribute('y1'),\n                            stroke: color,\n                            'stroke-width': linewidth\n                        }\n                    });\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // The Bar chart grow effect\n        //\n        this.grow = function ()\n        {\n            var opt      = arguments[0] || {},\n                frames   = opt.frames || 30,\n                frame    = 0,\n                obj      = this,\n                data     = [],\n                height   = null,\n                seq      = 0;\n\n            //\n            // Copy the data\n            //\n            data = RGraph.SVG.arrayClone(this.data);\n\n            this.draw();\n\n            var iterate = function ()\n            {\n\n                for (var i=0,seq=0,len=obj.coords.length; i<len; ++i, ++seq) {\n\n                    var   multiplier = (frame / frames)\n                        // RGraph.SVG.FX.getEasingMultiplier(frames, frame)\n                        // RGraph.SVG.FX.getEasingMultiplier(frames, frame);\n                \n                \n\n\n                    // TODO Go through the data and update the value according to\n                    // the frame number\n                    if (typeof data[i] === 'number') {\n\n                        height      = Math.abs(obj.getYCoord(data[i]) - obj.getYCoord(0));\n                        obj.data[i] = data[i] * multiplier;\n                        height      = multiplier * height;\n\n                        // Set the new height on the rect\n                        obj.coords[seq].element.setAttribute(\n                            'height',\n                            height\n                        );\n\n                        // Set the correct Y coord on the object\n                        obj.coords[seq].element.setAttribute(\n                            'y',\n                            data[i] < 0 ? obj.getYCoord(0) : obj.getYCoord(0) - height\n                        );\n\n\n\n                        // This upadtes the size of the 3D sides to the bar\n                        if (properties.variant === '3d') {\n                        \n                            // Remove the 3D sides to the bar\n                            if (obj.coords[i].element.rgraph_3d_side_face[0].parentNode) obj.coords[i].element.rgraph_3d_side_face[0].parentNode.removeChild(obj.coords[i].element.rgraph_3d_side_face[0]);\n                            if (obj.coords[i].element.rgraph_3d_side_face[1].parentNode) obj.coords[i].element.rgraph_3d_side_face[1].parentNode.removeChild(obj.coords[i].element.rgraph_3d_side_face[1]);\n                            \n                            if (obj.coords[i].element.rgraph_3d_top_face[0].parentNode) obj.coords[i].element.rgraph_3d_top_face[0].parentNode.removeChild(obj.coords[i].element.rgraph_3d_top_face[0]);\n                            if (obj.coords[i].element.rgraph_3d_top_face[1].parentNode) obj.coords[i].element.rgraph_3d_top_face[1].parentNode.removeChild(obj.coords[i].element.rgraph_3d_top_face[1]);\n                            \n                            // Add the 3D sides to the bar (again)\n                            obj.drawSide3dFace({rect: obj.coords[i].element});\n                            \n                            // Draw the top side of the 3D bar\n                            if (properties.grouping === 'grouped') {\n                                obj.drawTop3dFace({rect: obj.coords[i].element   });\n                            }\n\n                            // Now remove and immediately re-add the front face of\n                            // the bar - this is so that the front face appears\n                            // above the other sides\n                            if (obj.coords[i].element.parentNode) {\n                                var parent = obj.coords[i].element.parentNode;\n                                var node   = parent.removeChild(obj.coords[i].element);\n                                parent.appendChild(node);\n                            }\n                        }\n\n\n                    } else if (typeof data[i] === 'object') {\n\n                        var accumulativeHeight = 0;\n\n                        for (var j=0,len2=data[i].length; j<len2; ++j, ++seq) {\n\n                            height         = Math.abs(obj.getYCoord(data[i][j]) - obj.getYCoord(0));\n                            height         = multiplier * height;\n                            obj.data[i][j] = data[i][j] * multiplier;\n                            height = Math.round(height);\n\n                            obj.coords[seq].element.setAttribute(\n                                'height',\n                                height\n                            );\n\n                            obj.coords[seq].element.setAttribute(\n                                'y',\n                                data[i][j] < 0 ? (obj.getYCoord(0) + accumulativeHeight) : (obj.getYCoord(0) - height - accumulativeHeight)\n                            );\n\n\n\n\n    \n                            // This updates the size of the 3D sides to the bar\n                            if (properties.variant === '3d') {\n\n                                // Remove the 3D sides to the bar\n                                if (obj.coords[seq].element.rgraph_3d_side_face[0].parentNode) obj.coords[seq].element.rgraph_3d_side_face[0].parentNode.removeChild(obj.coords[seq].element.rgraph_3d_side_face[0]);\n                                if (obj.coords[seq].element.rgraph_3d_side_face[1].parentNode) obj.coords[seq].element.rgraph_3d_side_face[1].parentNode.removeChild(obj.coords[seq].element.rgraph_3d_side_face[1]);\n                                \n                                if (obj.coords[seq].element.rgraph_3d_top_face[0].parentNode) obj.coords[seq].element.rgraph_3d_top_face[0].parentNode.removeChild(obj.coords[seq].element.rgraph_3d_top_face[0]);\n                                if (obj.coords[seq].element.rgraph_3d_top_face[1].parentNode) obj.coords[seq].element.rgraph_3d_top_face[1].parentNode.removeChild(obj.coords[seq].element.rgraph_3d_top_face[1]);\n                                \n                                // Add the 3D sides to the bar (again)\n                                obj.drawSide3dFace({rect: obj.coords[seq].element});\n\n// Draw the top side of the 3D bar\n// TODO Need to only draw the top face when the bar is either\n//      not stacked or is the last segment in the stack\nobj.drawTop3dFace({rect: obj.coords[seq].element});\n    \n                                // Now remove and immediately re-add the front face of\n                                // the bar - this is so that the front face appears\n                                // above the other sides\n                                if (obj.coords[seq].element.parentNode) {\n                                    var parent = obj.coords[seq].element.parentNode;\n                                    var node   = parent.removeChild(obj.coords[seq].element);\n                                    parent.appendChild(node);\n                                }\n                            }\n                            accumulativeHeight += (properties.grouping === 'stacked' ? height : 0);\n\n                        }\n\n                        //\n                        // Set the height and Y cooord of the backfaces if necessary\n                        //\n                        if (obj.stackedBackfaces[i]) {\n                            obj.stackedBackfaces[i].setAttribute(\n                                'height',\n                                accumulativeHeight\n                            );\n    \n                            obj.stackedBackfaces[i].setAttribute(\n                                'y',\n                                obj.height - properties.marginBottom - accumulativeHeight\n                            );\n                        }\n\n                        // Decrease seq by one so that it's not incremented twice\n                        --seq;\n                    }\n                }\n\n                if (frame++ < frames) {\n                    //setTimeout(iterate, frame > 1 ? opt.delay : 200);\n                    RGraph.SVG.FX.update(iterate);\n                } else if (opt.callback) {\n                    (opt.callback)(obj);\n                }\n            };\n\n            iterate();\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // HBar chart Wave effect.\n        // \n        // @param object OPTIONAL An object map of options. You specify 'frames'\n        //                        here to give the number of frames in the effect\n        //                        and also callback to specify a callback function\n        //                        thats called at the end of the effect\n        //\n        this.wave = function ()\n        {\n            // First draw the chart\n            this.draw();\n\n            var obj = this,\n                opt = arguments[0] || {};\n            \n            opt.frames      = opt.frames || 60;\n            opt.startFrames = [];\n            opt.counters    = [];\n\n            var framesperbar    = opt.frames / 3,\n                frame           = -1,\n                callback        = opt.callback || function () {};\n\n            for (var i=0,len=this.coords.length; i<len; ++i) {\n\n                opt.startFrames[i] = ((opt.frames / 2) / (obj.coords.length - 1)) * i;\n                opt.counters[i]    = 0;\n                \n                // Now zero the height of the bar (and remove the 3D faces)\n                this.coords[i].element.setAttribute('height', 0);\n                \n                if (this.coords[i].element.rgraph_3d_side_face) {\n                \n                    var parent = this.coords[i].element.rgraph_3d_side_face[0].parentNode;\n                    \n                    parent.removeChild(this.coords[i].element.rgraph_3d_side_face[0]);\n                    parent.removeChild(this.coords[i].element.rgraph_3d_side_face[1]);\n                    \n                    parent.removeChild(this.coords[i].element.rgraph_3d_top_face[0]);\n                    parent.removeChild(this.coords[i].element.rgraph_3d_top_face[1]);\n                }\n            }\n\n            function iterator ()\n            {\n                ++frame;\n\n                for (var i=0,len=obj.coords.length; i<len; ++i) {\n                \n                    var el = obj.coords[i].element;\n\n                    if (frame > opt.startFrames[i]) {\n                        \n                        var originalHeight = el.getAttribute('data-original-height'),\n                            height,\n                            value = parseFloat(el.getAttribute('data-value'));\n\n                        var height = Math.min(\n                            ((frame - opt.startFrames[i]) / framesperbar) * originalHeight,\n                            originalHeight\n                        );\n\n                        el.setAttribute(\n                            'height',\n                            height < 0 ? 0 : height\n                        );\n\n                        el.setAttribute(\n                            'y',\n                            value >=0 ? obj.getYCoord(0) - height : obj.getYCoord(0)\n                        );\n\n\n\n                        // This updates the size of the 3D sides to the bar\n                        if (properties.variant === '3d') {\n                        \n                            // Remove the 3D sides to the bar\n                            var parent = el.rgraph_3d_side_face[0].parentNode;\n        \n                            if (parent) parent.removeChild(el.rgraph_3d_side_face[0]);\n                            if (parent) parent.removeChild(el.rgraph_3d_side_face[1]);\n                            \n                            var parent = el.rgraph_3d_top_face[0].parentNode;\n                            if (parent) parent.removeChild(el.rgraph_3d_top_face[0]);\n                            if (parent) parent.removeChild(el.rgraph_3d_top_face[1]);\n                            \n\n\n                            // Now remove and immediately re-add the front face of\n                            // the bar - this is so that the front face appears\n                            // above the other sides\n                            if (el.parentNode) {\n                                var parent = el.parentNode;\n                                var node   = parent.removeChild(el);\n                                parent.appendChild(node);\n                            }\n                        }\n\n\n                        if (properties.grouping === 'stacked') {\n                            \n                            var seq = el.getAttribute('data-sequential-index');\n                            var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n                            \n                            if (indexes[1] > 0) {\n                                el.setAttribute(\n                                    'y',\n                                    parseInt(obj.coords[i - 1].element.getAttribute('y')) - height\n                                );\n                            }\n                        }\n\n                        if (properties.variant === '3d') {\n                            // Add the 3D sides to the bar (again)\n                            obj.drawSide3dFace({\n                                rect:  el,\n                                value: el.getAttribute('data-value')\n                            });\n    \n                            // Draw the top side of the 3D bar\n                            if (properties.grouping === 'grouped' || (properties.grouping === 'stacked' && (indexes[1] + 1) === obj.data[indexes[0]].length) ) {\n                                obj.drawTop3dFace({\n                                    rect:  el,\n                                    value: el.getAttribute('data-value')\n                                });\n                            }\n                        }\n                    }\n                }\n\n\n                if (frame >= opt.frames) {\n                    callback(obj);\n                } else {\n                    RGraph.SVG.FX.update(iterator);\n                }\n            }\n            \n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that handles Bar chart specific tooltip substitutions\n        //\n        this.tooltipSubstitutions = function (opt)\n        {\n            var indexes = RGraph.SVG.sequentialIndexToGrouped(opt.index, this.data);\n\n            return {\n                  index: indexes[1],\n                dataset: indexes[0],\n        sequentialIndex: opt.index,\n                  value: typeof this.data[indexes[0]] === 'number' ? this.data[indexes[0]] : this.data[indexes[0]][indexes[1]],\n                 values: typeof this.data[indexes[0]] === 'number' ? [this.data[indexes[0]]] : this.data[indexes[0]]\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that returns the correct color/label/value\n        //\n        // @param object specific The indexes that are applicable\n        // @param number index    The appropriate index\n        //\n        this.tooltipsFormattedCustom = function (specific, index)\n        {\n            if (typeof this.data[0] === 'object') {\n                var label = (!RGraph.SVG.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[index])\n                                ? properties.tooltipsFormattedKeyLabels[index]\n                                : '';\n    \n            } else {\n\n                var label = (   !RGraph.SVG.isNull(properties.tooltipsFormattedKeyLabels)\n                            && typeof properties.tooltipsFormattedKeyLabels === 'object'\n                            && properties.tooltipsFormattedKeyLabels[specific.index])\n                                ? properties.tooltipsFormattedKeyLabels[specific.index]\n                                : '';\n            }\n\n            return {\n                label: label\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for static tooltip positioning\n        //\n        this.positionTooltipStatic = function (args)\n        {\n            var obj      = args.object,\n                e        = args.event,\n                tooltip  = args.tooltip,\n                index    = args.index,\n                svgXY    = RGraph.SVG.getSVGXY(obj.svg),\n                coords   = this.coords[args.index];\n\n            // Position the tooltip in the X direction\n            args.tooltip.style.left = (\n                  svgXY[0]                       // The X coordinate of the canvas\n                + coords.x                       // The X coordinate of the bar on the chart\n                - (tooltip.offsetWidth / 2)      // Subtract half of the tooltip width\n                + (coords.width / 2)                // Add half of the bar width\n            ) + 'px';\n\n\n\n\n            // If the chart is a 3D version the tooltip Y position needs this\n            // adjustment\n            var adjustment = 0;\n            \n            if (properties.variant === '3d') {\n                var left  = coords.x;\n                var top   = coords.y;\n                var angle = 5 / (180 / Math.PI);\n                \n                var adjustment = Math.tan(angle) * left;\n            }\n\n\n\n\n            args.tooltip.style.top  = (\n                  svgXY[1]                      // The Y coordinate of the canvas\n                + coords.y                      // The Y coordinate of the bar on the chart\n                - tooltip.offsetHeight          // The height of the tooltip\n                - 15                            // An arbitrary amount\n                + adjustment                    // Account for the 3D\n            ) + 'px';\n\n\n            // If the bar is a negative one, add half the height to the Y coord\n            var data_arr = RGraph.SVG.arrayLinearize(this.data);\n\n            if (data_arr[index] < 0) {\n                args.tooltip.style.top = \n                       parseFloat(args.tooltip.style.top)\n                    + (coords.height / 2)\n                    + 'px';\n            }\n\n\n            \n            // If the top of the tooltip is off the top of the page\n            // then move the tooltip down\n            if(parseFloat(args.tooltip.style.top) < 0) {\n                args.tooltip.style.top = parseFloat(args.tooltip.style.top) + 20 + 'px';\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Set the options that the user has provided\n        //\n        for (i in conf.options) {\n            if (typeof i === 'string') {\n                this.set(i, conf.options[i]);\n            }\n        }\n    };\n            \n    return this;\n\n// End module pattern\n})(window, document);"],"names":[],"version":3,"file":"index.51d2b306.js.map","sourceRoot":"/__parcel_source_root/"}